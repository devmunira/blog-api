---
openapi: 3.0.0
info:
  title: My First Blog API With Swagger
  description: |
    " This is the first professional api project I build as a assignment of full-stack army. This is a simple blog api application where anyone can create a new account, login to their system and create articles and post their comments that will be visible publicly."
  contact:
    name: Munira AKter
    url: https://munirakter.com
    email: muniraweb@gmail.com
  version: 1.0.0-oas3
servers:
- url: http://localhost:4000/api/v1
  description: Local Server for Development
- url: https://myblogapi.com
  description: Production Server
tags:
- name: Authentication
  description: "Handle All Authentication Endpoints [Public]"
- name: Article
  description: "All Articles Endpoints [Public & Private]"
- name: User
  description: "Handle All user EndPoints [Public & Private]"
- name: Category
  description: "Handle All Category EndPoints [Public & Private]"
- name: Comment
  description: "Handle All Articles Comments [Public & Private]"
paths:
  /auth/login:
    post:
      tags:
      - Authentication
      description: This is a public route for login user with email & password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_login_body'
      responses:
        "200":
          description: 200 response sent when sign In successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
  /auth/register:
    post:
      tags:
      - Authentication
      description: This is a public route for register new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth_register_body'
      responses:
        "200":
          description: 200 response sent when sign up successfully completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
  /articles:
    get:
      tags:
      - Article
      description: Retrive all articles according to search params with pagination
      parameters:
      - name: page
        in: query
        description: Current Page Number for handle Pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: limit
        in: query
        description: Data Redered limit Number for handle Pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: sort_by
        in: query
        description: Data Sorting Field
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: title
      - name: sort_type
        in: query
        description: "Data Sorting Type (ase,desc)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: desc
          enum:
          - ase
          - desc
      - name: search
        in: query
        description: Data Search params
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: hello
      - name: category
        in: query
        description: Get spacific category posts
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: author
        in: query
        description: Get spacific author posts
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 15
      responses:
        "200":
          description: Retrive all articles according to search params with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    post:
      tags:
      - Article
      description: "Create new Post [Private]"
      requestBody:
        description: Post Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Articles'
      responses:
        "201":
          description: Article Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesCreateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /articles/{id}:
    get:
      tags:
      - Article
      description: get Single articles by id
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      - name: expand
        in: query
        description: "expand relational data like category, author & comments assiociat with this article"
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: "category,author"
          enum:
          - category
          - author
          - comments
      responses:
        "200":
          description: Sucessfully get article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
    put:
      tags:
      - Article
      description: "Update or Create new Post [Private]"
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: Post Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Articles'
      responses:
        "201":
          description: Article Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateDTO'
        "200":
          description: Article Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    delete:
      tags:
      - Article
      description: Delete Articles
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "204":
          description: Article Deleted Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_204'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Article
      description: Upadate Spacific some columns
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles_id_body'
      responses:
        "200":
          description: Article Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticlesUpdateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
  /users:
    get:
      tags:
      - User
      description: Retrive all users according to search params with pagination
      parameters:
      - name: page
        in: query
        description: Current Page Number for handle Pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: limit
        in: query
        description: Data Redered limit Number for handle Pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: sort_by
        in: query
        description: Data Sorting Field
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: title
      - name: sort_type
        in: query
        description: "Data Sorting Type (ase,desc)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: desc
          enum:
          - ase
          - desc
      - name: search
        in: query
        description: Data Search params
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: hello
      - name: status
        in: query
        description: Get spacific status items
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: active
      responses:
        "200":
          description: Retrive all users according to search params with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    post:
      tags:
      - User
      description: "Create new User [Private]"
      requestBody:
        description: User Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_body'
      responses:
        "201":
          description: User Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /users/{id}:
    get:
      tags:
      - User
      description: get Single User by id
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "200":
          description: Sucessfully get User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
    put:
      tags:
      - User
      description: "Update or Create new User [Private]"
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: Post Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_id_body'
      responses:
        "201":
          description: user Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateDTO'
        "200":
          description: Article Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    delete:
      tags:
      - User
      description: Delete User
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "204":
          description: User Deleted Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_204'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
    patch:
      tags:
      - User
      description: Upadate Spacific some columns
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_id_body_1'
      responses:
        "200":
          description: User Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
  /categories:
    get:
      tags:
      - Category
      description: Retrive all Category according to search params with pagination
      parameters:
      - name: page
        in: query
        description: Current Page Number for handle Pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: limit
        in: query
        description: Data Redered limit Number for handle Pagination
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int31
          example: 2
      - name: sort_by
        in: query
        description: Data Sorting Field
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: title
      - name: sort_type
        in: query
        description: "Data Sorting Type (ase,desc)"
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: string
          example: desc
          enum:
          - ase
          - desc
      - name: search
        in: query
        description: Data Search params
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: hello
      responses:
        "200":
          description: Retrive all categories according to search params with pagination
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
    post:
      tags:
      - Category
      description: "Create new Category [Private]"
      requestBody:
        description: User Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_body'
      responses:
        "201":
          description: categoires Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCreateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /categories/{id}:
    get:
      tags:
      - Category
      description: get Single Category by id
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "200":
          description: Sucessfully get Category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
    put:
      tags:
      - Category
      description: "Update or Create new Category [Private]"
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        description: Post Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_id_body'
      responses:
        "201":
          description: Category Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateDTO'
        "200":
          description: Category Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
    delete:
      tags:
      - Category
      description: Delete Category
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "204":
          description: Category Deleted Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_204_1'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Category
      description: Upadate Spacific some columns
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categories_id_body_1'
      responses:
        "200":
          description: Category Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryUpdateDTO'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
  /comments:
    post:
      tags:
      - Comment
      description: "Create new Comment [Private]"
      requestBody:
        description: Comment Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments_body'
      responses:
        "201":
          description: Comment Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
      security:
      - bearerAuth: []
  /comments/{id}:
    delete:
      tags:
      - Comment
      description: Delete Comment only own comments can be deleted by user
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        "204":
          description: Comment Deleted Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_204'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Comment
      description: Upadate Spacific some columns only own comments can be updated by user
      parameters:
      - name: id
        in: path
        description: Article Id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments_id_body'
      responses:
        "200":
          description: Comment Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "500":
          description: 500 response send when server have any issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_500'
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
components:
  schemas:
    Articles:
      allOf:
      - required:
        - authorId
        - body
        - categoryId
        - id
        - status
        - title
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          title:
            type: string
            example: First Articles
          body:
            type: string
            format: text
            example: This is a description text
          categoryId:
            type: integer
            format: int32
            example: 1
          authorId:
            type: integer
            format: int32
            example: 1
          cover:
            type: string
            format: url
            example: https://s3.aws.example.com/cover.webp
          link:
            type: string
            format: url
            example: /articles/:articlesId
          status:
            type: string
            enum:
            - published
            - unpublished
            - draft
      - $ref: '#/components/schemas/Timestamp'
    ArticlesCreateDTO:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: Post Created SuccessFully
        data:
          $ref: '#/components/schemas/Articles'
        links:
          $ref: '#/components/schemas/ArticlesCreateDTO_links'
    ArticlesUpdateDTO:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: Post Updated SuccessFully
        data:
          $ref: '#/components/schemas/Articles'
        links:
          $ref: '#/components/schemas/ArticlesCreateDTO_links'
    Comments:
      allOf:
      - required:
        - articleId
        - comment
        - id
        - userId
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          comment:
            type: string
            format: text
            example: This is a comment text
          userId:
            type: integer
            format: int32
            example: 1
          articleId:
            type: integer
            format: int32
            example: 1
      - $ref: '#/components/schemas/Timestamp'
    CommentsCreateDTO:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: Comments Created SuccessFully
        data:
          $ref: '#/components/schemas/Comments'
        links:
          $ref: '#/components/schemas/CommentsCreateDTO_links'
    CommentsUpdateDTO:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: Comments Upadted SuccessFully
        data:
          $ref: '#/components/schemas/Comments'
        links:
          $ref: '#/components/schemas/CommentsUpdateDTO_links'
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          format: string
          example: munira
    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          format: string
          example: NextJs
    User:
      allOf:
      - required:
        - email
        - id
        - is_admin
        - name
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          name:
            type: string
            format: string
            example: munira
          email:
            type: string
            format: email
            example: muniraweb@gmail.com
          is_admin:
            type: boolean
            example: false
      - $ref: '#/components/schemas/Timestamp'
    UserCreateDTO:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: User Created SuccessFully
        data:
          $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/UserCreateDTO_links'
    UserUpdateDTO:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: User Updated SuccessFully
        data:
          $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/UserCreateDTO_links'
    Timestamp:
      required:
      - createdAt
      - updatedAt
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime
    pagination:
      required:
      - limit
      - page
      - totalItems
      - totalPage
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
    Links:
      required:
      - createdAt
      - updatedAt
      type: object
      properties:
        self:
          type: string
          format: url
          example: "/item/{id}"
        allItems:
          type: string
          format: url
          example: /items
    Category:
      allOf:
      - required:
        - id
        - name
        type: object
        properties:
          id:
            type: integer
            format: int32
            example: 1
          name:
            type: string
            format: string
            example: nextjs
      - $ref: '#/components/schemas/Timestamp'
    CategoryCreateDTO:
      type: object
      properties:
        code:
          type: integer
          example: 201
        message:
          type: string
          example: Catgeory Created SuccessFully
        data:
          $ref: '#/components/schemas/Category'
        links:
          $ref: '#/components/schemas/CategoryCreateDTO_links'
    CategoryUpdateDTO:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: Category Updated SuccessFully
        data:
          $ref: '#/components/schemas/Category'
        links:
          $ref: '#/components/schemas/CategoryCreateDTO_links'
    auth_login_body:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        password:
          type: string
          format: password
          example: Password123@
    inline_response_200:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          format: string
          example: Sign In Successfully Completed
        data:
          $ref: '#/components/schemas/inline_response_200_data'
        links:
          $ref: '#/components/schemas/inline_response_200_links'
    inline_response_400:
      type: object
      properties:
        code:
          type: integer
          format: int31
          example: 400
        error:
          type: string
          format: string
          example: Bad Request
        data:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_400_data'
    inline_response_500:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        error:
          type: string
          example: Internal Server Error
        message:
          type: string
          example: We are sorry for the inconvenience.Please try again later
    auth_register_body:
      required:
      - email
      - name
      - password
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        password:
          type: string
          format: password
          example: Password123@
        status:
          type: string
          example: active
          enum:
          - active
          - inactive
          - blocked
    inline_response_200_1:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          format: string
          example: Sign Up Successfully Completed
        data:
          $ref: '#/components/schemas/inline_response_200_1_data'
        links:
          $ref: '#/components/schemas/inline_response_200_links'
    inline_response_200_2:
      type: object
      properties:
        code:
          type: integer
          format: int31
          example: 200
        message:
          type: string
          format: string
          example: Success
        data:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_2_data'
        links:
          $ref: '#/components/schemas/inline_response_200_2_links'
        pagination:
          $ref: '#/components/schemas/pagination'
    inline_response_401:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 401
        error:
          type: string
          example: Unauthenticated
        message:
          type: string
          example: You are not an authenticated user
    inline_response_403:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 403
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: You don't have the right permissions
    inline_response_200_3:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          format: string
          example: Success
        data:
          allOf:
          - $ref: '#/components/schemas/Articles'
          - type: object
            properties:
              author:
                $ref: '#/components/schemas/AuthorDTO'
          - type: object
            properties:
              category:
                $ref: '#/components/schemas/CategoryDTO'
          - type: object
            properties:
              comments:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'
        links:
          $ref: '#/components/schemas/Links'
    inline_response_404:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        error:
          type: string
          example: Not Found
        message:
          type: string
          example: Requested resource not found
    inline_response_204:
      type: object
      properties:
        code:
          type: integer
          format: int31
          example: 400
        message:
          type: string
          format: string
          example: Data deleted successfully
    articles_id_body:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: First Articles
        body:
          type: string
          format: text
          example: This is a description text
        categoryId:
          type: integer
          format: int32
          example: 1
        authorId:
          type: integer
          format: int32
          example: 1
        cover:
          type: string
          format: url
          example: https://s3.aws.example.com/cover.webp
        status:
          type: string
          enum:
          - published
          - unpublished
          - draft
    inline_response_200_4:
      type: object
      properties:
        code:
          type: integer
          format: int31
          example: 200
        message:
          type: string
          format: string
          example: Success
        data:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_4_data'
        links:
          $ref: '#/components/schemas/inline_response_200_4_links'
        pagination:
          $ref: '#/components/schemas/pagination'
    users_body:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        is_admin:
          type: boolean
          example: false
        status:
          type: string
          example: active
          enum:
          - active
          - inactive
          - blocked
    inline_response_200_5:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          format: string
          example: Success
        data:
          allOf:
          - $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/Links'
    users_id_body:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        status:
          type: string
          example: active
          enum:
          - active
          - inactive
          - blocked
    users_id_body_1:
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        status:
          type: string
          example: active
          enum:
          - active
          - inactive
          - blocked
    inline_response_200_6:
      type: object
      properties:
        code:
          type: integer
          format: int31
          example: 200
        message:
          type: string
          format: string
          example: Success
        data:
          type: array
          items:
            $ref: '#/components/schemas/inline_response_200_6_data'
        links:
          $ref: '#/components/schemas/inline_response_200_6_links'
        pagination:
          $ref: '#/components/schemas/pagination'
    categories_body:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
    inline_response_200_7:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          format: string
          example: Success
        data:
          allOf:
          - $ref: '#/components/schemas/Category'
        links:
          $ref: '#/components/schemas/Links'
    categories_id_body:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
    inline_response_204_1:
      type: object
      properties:
        code:
          type: integer
          format: int31
          example: 400
        message:
          type: string
          format: string
          example: Category deleted successfully
    categories_id_body_1:
      type: object
      properties:
        name:
          type: string
          format: string
          example: munira
    comments_body:
      allOf:
      - required:
        - email
        - name
        type: object
        properties:
          userId:
            type: integer
            format: int32
            example: 35
          articlesId:
            type: integer
            format: int32
            example: 35
          comment:
            type: string
            format: text
            example: this is a comment
      - $ref: '#/components/schemas/Timestamp'
    comments_id_body:
      required:
      - comment
      type: object
      properties:
        comment:
          type: string
          format: text
          example: this is a comment
    ArticlesCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /articles/1
        allPost:
          type: string
          format: url
          example: /articles
    CommentsCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /comments
    CommentsUpdateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /comments/1
    UserCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /users
        allUser:
          type: string
          format: url
          example: /users
        allPostByUser:
          type: string
          format: url
          example: /posts?author=1
    CategoryCreateDTO_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /categories
        allcategories:
          type: string
          format: url
          example: /categories
        allPostBycategories:
          type: string
          format: url
          example: /post?categories=1
    inline_response_200_data_user:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 200
        name:
          type: string
          format: string
          example: munira
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        is_admin:
          type: boolean
          format: boolean
          example: false
    inline_response_200_data:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        user:
          $ref: '#/components/schemas/inline_response_200_data_user'
    inline_response_200_links:
      type: object
      properties:
        self:
          type: string
          example: /auth/login
    inline_response_400_data:
      type: object
      properties:
        field:
          type: string
          example: email
        message:
          type: string
          example: Invalid email
        in:
          type: string
          example: body
          enum:
          - query
          - body
    inline_response_200_1_data:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        user:
          $ref: '#/components/schemas/User'
    inline_response_200_2_data:
      required:
      - author
      - category
      - id
      - title
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: first article
        body:
          type: string
          example: first article body
        cover:
          type: string
          format: url
          example: https://s3.aws.com/myfirstblog/124.jpg
        status:
          type: string
          example: published
          enum:
          - published
          - unpublished
          - draft
        author:
          $ref: '#/components/schemas/AuthorDTO'
        category:
          $ref: '#/components/schemas/CategoryDTO'
        link:
          type: string
          format: url
          example: /articles/1
    inline_response_200_2_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /articles/1/search?q=test&page=1&limit=10
        nextPage:
          type: string
          format: url
          example: /articles/1/search?q=test&page=2&limit=10
        prevPage:
          type: string
          format: url
          example: /articles/1/search?q=test&page=1&limit=10
    inline_response_200_4_data:
      required:
      - email
      - id
      - name
      - status
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: user one
        email:
          type: string
          example: muniraweb@gmail.com
        is_admin:
          type: boolean
          example: false
        status:
          type: string
          example: active
          enum:
          - active
          - inactive
          - blocked
        link:
          type: string
          format: url
          example: /users/1
    inline_response_200_4_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /users/search?q=test&page=1&limit=10&status=active
        nextPage:
          type: string
          format: url
          example: /users/2/search?q=test&page=2&limit=10
        prevPage:
          type: string
          format: url
          example: /users/1/search?q=test&page=1&limit=10
    inline_response_200_6_data:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: user one
        link:
          type: string
          format: url
          example: /categoires/1
    inline_response_200_6_links:
      type: object
      properties:
        self:
          type: string
          format: url
          example: /categoires/search?q=test&page=1&limit=10
        nextPage:
          type: string
          format: url
          example: /categoires/2/search?q=test&page=2&limit=10
        prevPage:
          type: string
          format: url
          example: /categoires/1/search?q=test&page=1&limit=10
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    "401":
      description: Unauthenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_401'
    "403":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_403'
    "404":
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    "405":
      description: Method Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 405
              error:
                type: string
                example: Method Not Allowed
              message:
                type: string
                example: You are hiting on a invalid method
    "500":
      description: 500 response send when server have any issue
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_500'
  parameters:
    page:
      name: page
      in: query
      description: Current Page Number for handle Pagination
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int31
        example: 2
    category:
      name: category
      in: query
      description: Get spacific category posts
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int31
        example: 2
    author:
      name: author
      in: query
      description: Get spacific author posts
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int31
        example: 15
    status:
      name: status
      in: query
      description: Get spacific status items
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: string
        example: active
    limit:
      name: limit
      in: query
      description: Data Redered limit Number for handle Pagination
      required: false
      style: form
      explode: true
      schema:
        type: integer
        format: int31
        example: 2
    sort_by:
      name: sort_by
      in: query
      description: Data Sorting Field
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: string
        example: title
    sort_type:
      name: sort_type
      in: query
      description: "Data Sorting Type (ase,desc)"
      required: false
      style: form
      explode: true
      schema:
        type: string
        format: string
        example: desc
        enum:
        - ase
        - desc
    search:
      name: search
      in: query
      description: Data Search params
      required: false
      style: form
      explode: true
      schema:
        type: string
        example: hello
    idPathParam:
      name: id
      in: path
      description: Article Id
      required: true
      style: simple
      explode: false
      schema:
        type: integer
        format: int32
        example: 1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
